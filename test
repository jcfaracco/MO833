#!/bin/bash -x

key=
testplan=

usage()
{
    echo -e "usage: setup [[ -k keyfile -t testcase -m machine_type -p processors -l loops ] | [ -h ]]\n"
}

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

while [ "$1" != "" ]; do
    case $1 in
        -k | --key )            shift
                                key=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        -t | --test )           shift
                                testcase=$1
				;;
	-m | --machine )        shift
                                mtype=$1
                                ;;
	-p | --processors )     shift
	                        np=$1
				;;
        -s | --size )           shift
                                size=$1
                                ;;
	-l | --loop )           shift
                                loop=$1
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

if [ -z "$testcase" ]; then
    echo -e "Test case is required.\n"
    exit 1
fi

if [ -z "$size" ]; then
    if [[ "$testcase" == "gromacs" ]]; then
        size=/home/ubuntu/benchMEM.tpr
    else
        size=/home/ubuntu/opm/spe1/SPE1CASE1.DATA
    fi
elif [[ "$size" == "small" ]]; then
    if [[ "$testcase" == "gromacs" ]]; then
        size=/home/ubuntu/benchMEM.tpr
    else
        size=/home/ubuntu/opm/spe1/SPE1CASE1.DATA
    fi
elif [[ "$size" == "large" ]]; then
    if [[ "$testcase" == "gromacs" ]]; then
        size=/home/ubuntu/benchRIB.tpr
    else
        size=/home/ubuntu/opm/norne/NORNE_ATW2013.DATA
    fi
else
    echo -e "Size option should be 'small' or 'large'\n"
    exit 1
fi

if [ -z "$mtype" ]; then
    echo -e "Machine type is required.\n"
    exit 1
fi

if [ -z "$key" ]; then
    echo -e "No private key file: use -k option.\n"
    exit 1
fi

if [ -z "$loop" ]; then
    loop=30
fi

if [ -z "$np" ]; then
    np=1
fi

tmp_dir=$(mktemp -d -t test-XXXXXXXX)

cp -r scripts/ansible/ $tmp_dir/
cp $key $tmp_dir/ansible/
mkdir $tmp_dir/ansible/output/

docker run --workdir "/ansible" -v $tmp_dir/ansible/:/ansible/:Z opm:default ansible-playbook ec2/resize.yml --extra-vars "ec2_new_type=$mtype"

docker run --workdir "/ansible" -v $tmp_dir/ansible/:/ansible/:Z opm:default ansible-playbook ec2/restart.yml

sleep 10

mkdir $tmp_dir/ansible/output/$mtype/
for j in $(seq 1 $loop); do
    i=$np
    for i in $(seq 1 $np); do
        docker run --workdir "/ansible" -v $tmp_dir/ansible/:/ansible/:Z opm:default ansible-playbook test.yml --extra-vars "ec2_type=$mtype n_processes=$i output_dir='/ansible/output/$mtype' test_target=$testcase"
    done
done

cp -r $tmp_dir/ansible/output .

rm -rf $tmp_dir
